# -*- mode: org; coding: utf-8; -*-
#+TITLE:              Fabric 201
#+AUTHOR:         Junahan
#+EMAIL:             junahan@outlook.com 
#+DATE:              2018-07-16
#+LANGUAGE:    CN
#+OPTIONS:        H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:        TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT:   view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LICENSE:         CC BY 4.0

* 摘要

* 特性

** 服务发现
该特性自从 v1.2.0 加入。

*** 为什么需要服务发现？
为了在对等节点执行链码、提交交易至 =orderer= 节点，还有为了更新交易状态，应用需要通过 SDK API 链接至网络。

然而，为了允许应用连接到相关网络节点，SDK 需要很多信息。除了 CA 和通道中 =orderers= 和对等节点 TLS 证书 - 也包括他们的 IP 地址以及端口号 - 它还必须知道有关背书策略以及那些对等节点安装了链码 (因此应用知道该向那个对等节点传送链码提议 (proposals))。

在 v1.2 版本之前，这些信息是静态编码。然而，这种实现方式不能动态适应网络变化 (例如，额外的对等节点安装了相关链码，或者对等节点临时下线)。静态配置也不允许应用适应背书策略本身不的变化 (可能在新的组织加入通道时变化)。

额外的，客户端应用没有办法知道那个对等节点已经更新了账本，那些还没有。结果是，应用可能提交提议至那些账本数据尚没有和网络同步的对等节点，而导致交易提交无效并且浪费资源。

服务发现通过由对等节点计算所需要的动态信息并以符合需要的方式展现给应用而提升该处理过程。

*** 服务发现如何工作
应用程序会链接至一组受到信任的组织自己的对等节点执行发现查询。一个好的候选对等节点就是应用程序所属组织自己的一个对等节点。

应用发起一个配置查询以发现服务并且获得所有静态信息而无需和网络中的其他节点通讯。这些信息可以在任何时候通过想对等节点发送一个后续服务发现查询刷新。

发现服务运行在对等节点 - 而非应用端 - 并且使用由 =gossip= 通讯层维护的网络元数据信息， =gossip= 可以通过 =sayHello= 健康检查发现对等节点是否在线。发现服务也从节点状态数据库中获取诸如相关背书策略等信息。

通过服务发现，应用不再需要指定他们要从那些对等节点获取背书。SDK 能够简单的提供通道和链码 ID，发送查询到服务发现询问那些对等节点被需要。然后，发现服务将计算一个由如下两个对象构成的描述：
1. Layout :: 一个对等节点组以及与之相关的每个组被选择的节点数量。
2. 组到对等节点的映射 :: Layout 中的每个组到组对应的对等节点的映射。

如下是一个策略 =AND(Org, Org2)= 服务发现描述的例子，该例子中每个组织有两个对等节点。
#+BEGIN_SRC json
Layouts: [
     QuantitiesByGroup: {
       “Org1”: 1,
       “Org2”: 1,
     }
],
EndorsersByGroups: {
  “Org1”: [peer0.org1, peer1.org1],
  “Org2”: [peer0.org2, peer1.org2]
}
#+END_SRC

换句话说，该背书策略要求一个来自组织 Org1 的一个对等节点的签名和一个来自 Org2 的一个对等网络的签名。并且提供了来自这些组织的可用对等节点的名字 (分别来自 =Org1= 和 =Org2= 的 =peer0= 和 =peer1= 节点) 。

然后，SDK 从以上列表中随机选择背书布局。在上述例子中，背书策略是 =Org1 AND Org2= , SDK 只有唯一的选择，如果该策略是 =Org1 OR Org2= ，则 SDK 可以在 Org1, Org2 两个中随机选择一个以满足背书策略的要求。

在选择完布局后，SDK 根据所选择的布局并基于客户端指定的标准选择节点 (SDK 能够做到这点是因为它具有访问账本高度这样的元数据信息)。例如，它可以优先选择具有更高账本高度的节点或者不包含那些应用发现下线的节点。如果没有任何单一节点完全满足要求，SDK 将随机选择最匹配标准的节点。

*** 服务发现的能力
服务发现能够响应如下查询：
- 配置查询 :: 返回在通道中所有组织的 =MSPConfig= 以及通道中的 Orderer 端点。
- 对等节点成员关系查询 :: 返回所有已经加入通道中的节点。
- 背书查询 :: 返回通道中给定链码的背书描述。
- 本地对等节点成员关系查询 :: 返回本地对等节点的成员信息。默认的，客户端需要具有节点管理员权限。

*** 特殊要求
当对等节点激活 TLS 时，客户端必须提供一个 TLS 证书以链接对等节点。如果对等节点没有被配置为验证客户端证书，TLS 证书可以是自签名证书。

* 参考文献
1. Fabric document, https://hyperledger-fabric.readthedocs.io/en/release-1.2/index.html.
