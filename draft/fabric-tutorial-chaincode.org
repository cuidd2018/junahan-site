# -*- mode: org; coding: utf-8; -*-
#+TITLE:                 Fabric Chaincode 教程
#+AUTHOR:                Junahan
#+AUTHOR_LINK:           https://github.com/junahan
#+EMAIL:                 junahan@outlook.com 
#+DATE:                  2018-11-15
#+hugo_base_dir:         ../
#+hugo_auto_set_lastmod: t
#+hugo_tags:             Blockchain Hyperledger Fabric 超级账本 区块链
#+hugo_categories:       Blockchain
#+hugo_keywords:         hyperledger fabric 超级账本
#+hugo_draft:            true
#+LANGUAGE:              CN
#+OPTIONS:               H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:               TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT:            view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LICENSE:               CC BY 4.0

* 链码指南

** 什么是链码？
链码是一段实现预先定义好接口的程序，可以使用 Go, NodeJs, 或者 Java 语言写成。链码运行于一个安全的 Docker 容器内，该容器和对等节点进程完全隔离。链码通过接收应用程序提交交易的方式初始化和管理账本状态。

链码通常处理由参与网络的成员达成一致的商业逻辑，因此也可以把它当作是"智能合约"。链码创建的状态独立于链码并且不能够直接被另外的链码访问。然而，在同一个网络内，一个具有适当权限的链码可能通过调用另外链码的方式访问其他链码的状态。

** 两种角色
我们提供两种有关链码的不同视角。一个被命名为链码之于开发者，是从应用开发人员的角度看链码应用和解决方案的开发，另外一个角度是链码之于运维者，着眼于管理区块链网络的运维人员，他们可能使用超级账本 Fabric API 去安装、初始化和升级链码，但并不参与链码应用程序的开发。

* 链码之于开发者
** 什么是链码？
链码是一段实现预先定义好接口的程序，可以使用 Go, NodeJs, 或者 Java 语言写成。链码运行于一个安全的 Docker 容器内，该容器和对等节点进程完全隔离。链码通过接收应用程序提交交易的方式初始化和管理账本状态。

链码通常处理由参与网络的成员达成一致的商业逻辑，因此也可以把它当作是"智能合约"。交易提案 (proposal transaction) 可以调用链码去更新或者查询账本。通过合适的授权，链码可以调用其他链码（既可以是同一个通道，也可以是不同通道）去访问他们的状态。需要注意的是，如果被调用链码和调用者位于不同的通道，只有只读查询允许调用。也就是说，调用位于不同通道的链码仅支持查询（Query），查询并不参与随后提交阶段的状态验证。

在随后的章节中，我们将从应用开发者的角度探索链码。我们将展示一个样例应用的简单链码并且演示链码 Shim API 的每个方法的使用。

** 链码 API
#+BEGIN_QUOTE NOTE
有另外一套链码 APIs，其允许客户端（提交者）身份用于访问控制，客户端身份可以基于客户身份自身，也开始是组织身份，后者是客户端身份属性。例如，一个使用 key/value 表示的资产可能包含客户身份标示，并且只有该客户被授权去修改该 key/value。客户身份库有相关 APIs，链码可以使用该 APIs 去获取提交者信息以用作访问控制决策。

该指南并不包含这个主题，可以通过链接 [[https://github.com/hyperledger/fabric/blob/master/core/chaincode/lib/cid/README.md][CID 文档]] 找到有关该 APIs 信息。
#+END_QUOTE

每个链码程序都必须实现 =Chaincode= 接口：

- [[https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#Chaincode][Go]]
- [[https://fabric-shim.github.io/ChaincodeInterface.html][node.js]]
- [[https://fabric-chaincode-java.github.io/org/hyperledger/fabric/shim/Chaincode.html][Java]]

这些接口的方法被调用以响应接收到的交易。特别的，当链码接收到 =instantiate= 或者 =upgrade= 交易的时候，方法 =Init= 会被调用以执行任何必要的初始化操作，包括初始化应用状态等。当收到 =invoke= 交易的时候，方法 =Invoke= 会被调用以处理相应的交易提案。

链码 "shim" APIs 中的另外一个接口是 =ChaincodeStubInterface= ：

- [[https://godoc.org/github.com/hyperledger/fabric/core/chaincode/shim#ChaincodeStubInterface][Go]]
- [[https://fabric-shim.github.io/ChaincodeStub.html][node.js]]
- [[https://fabric-chaincode-java.github.io/org/hyperledger/fabric/shim/ChaincodeStub.html][Java]]

该 APIs 用于访问和修改账本，并用于链码之间的调用。

本指南使用 Go 语言链码，我们将通过实现一个用于管理简单资产的简易链码应用以演示这些 APIs 的使用。

** 简单资产链码
我们的应用是一个基本的链码例子，该链码在账本上创建资产(key-value 对)。

*** 选择代码位置
如果你还没有使用过 Go 语言编程，请确认你已经安装了 [[https://hyperledger-fabric.readthedocs.io/en/latest/prereqs.html#golang][Go 编程语言]]并且系统配置正确。

现在，你可以创建一个用于你的链码应用的代码目录，该作为目录 =$GOPATH/src/= 的子目录存在。

为了让事情简单，请使用如下命令：
#+BEGIN_SRC shell
mkdir -p $GOPATH/src/sacc && cd $GOPATH/src/sacc
#+END_SRC

现在，让我们创建代码文件：
#+BEGIN_SRC shell
touch sacc.go
#+END_SRC

*** 家务活


*** 初始化链码

* 链码之于运维者
