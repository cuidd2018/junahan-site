# -*- mode: org; coding: utf-8; -*-
#+TITLE:              JVM - 101
#+AUTHOR:             Junahan
#+EMAIL:              junahan@outlook.com 
#+DATE:               2018-06-27
#+LANGUAGE:           CN
#+OPTIONS:            H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:            TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT:         view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LICENSE:            CC BY 4.0

* 摘要
- The Java Virtual Machine (i.e. JVM) is an abstract computing machine. Like a real computing machine, it has an instruction set and manipulates various memory areas at run time.
- The JVM knows nothing of the Java programming language, only of a particular binary format, the class file format. Any language with functionality that can be expressed in terms of a valid class file can be hosted by the JVM.

* JVM 结构
** The class File Format
Compiled code to be executed by the Java Virtual Machine is represented using a hardware- and operating system-independent binary format, typically (but not necessarily) stored in a file, known as the class file format. 

** Data Types
- Two kinds of types: primitive types and reference types.

** Primitive Types and Values
- JVM 支持三类原始类型 - numeric types, boolean type, and the returnAddress type
- The integral types:
 - byte - 8-bit singed integer, default value is zero
 - short - 16-bit singed integer, default value is zero
 - int - 32-bit singed integer, default value is zero
 - long - 64-bit signed integer, default value is zero
 - char - 16-bit unsigned integers representing Unicode code points, encoded with UTF-16, default value is null code point ('\u0000')

** Floating-point Types and Values
- The floating-point types:
 - float - 32-bit, default value is positive zero
 - double, 64-bit, default value is positive zero

** Boolean Type and Values
- The =boolean= type encode the truth values true and false, and the default value is false.

** ReturnAddress Type and Values
- The values of the =returnAddress= type are pointers to the opcodes of JVM instructions.

** Reference Types and Values
Three kinds of =reference= types:
- class types
- array types
- interface types

The default reference type value is null.

** Run-Time Data Areas
The Java Virtual Machine defines various run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are created when a thread is created and destroyed when the thread exits.
*** The =pc= Register
- JVM can support many threads of execution at once. Each Java Virtual Machine thread has its own pc (program counter) register.
- If the current method of the thread is not =native=, the =pc= register contains the address of the JVM instruction currently being executed. The =pc= register value is undefined if the currently being executed thread is =native=.

*** Java Virtual Machine Stacks
Each JVM thread has a private JVM stack, created at the same time as the thread. A JVM stack stores frames.

*** Heap
The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated.
- The heap is created on virtual machine start-up.
- Heap storage for objects is reclaimed by GC.

*** Method Area
The JVM has a method area that is shared among all Java Virtual Machine threads. 
It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods used in class and instance initialization and interface initialization.

*** Run-Time Constant Pool
A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file.
Each run-time constant pool is allocated from the Java Virtual Machine's method area. The run-time constant pool for a class or interface is constructed when the class or interface is created by the Java Virtual Machine.

*** Native Method Stacks
An implementation of the Java Virtual Machine may use conventional stacks, colloquially called "C stacks," to support native methods (methods written in a language other than the Java programming language). 
Java Virtual Machine implementations that cannot load native methods and that do not themselves rely on conventional stacks need not supply native method stacks. If supplied, native method stacks are typically allocated per thread when each thread is created.

** Frames
A frame is used to store data and partial results, as well as to perform dynamic linking, return values for methods, and dispatch exceptions.
- A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes, whether that completion is normal or abrupt (it throws an uncaught exception). 
- Frames are allocated from the Java Virtual Machine stack of the thread creating the frame.
- Each frame has its own array of local variables, its own operand stack, and a reference to the run- time constant pool of the class of the current method.

* 参考文献
1. JVM Specification, Java SE 8 Edition, https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf.
3. Java Language Specification, Java SE 8 Edition, https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf.
